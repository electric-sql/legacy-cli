<%= original_sql %>
/*---------------------------------------------
Below are templated triggers added by Satellite
---------------------------------------------*/
<%= if is_init && false do %>
-- The ops log table
CREATE TABLE IF NOT EXISTS _electric_oplog (
  rowid INTEGER PRIMARY KEY AUTOINCREMENT,
  namespace String NOT NULL,
  tablename String NOT NULL,
  optype String NOT NULL,
  primaryKey String NOT NULL,
  newRow String,
  oldRow String,
  timestamp TEXT
);

-- Somewhere to keep our metadata
CREATE TABLE IF NOT EXISTS _electric_meta (
  key TEXT PRIMARY KEY,
  value BLOB
);

-- Somewhere to track migrations
CREATE TABLE IF NOT EXISTS _electric_migrations (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL UNIQUE,
  sha256 TEXT NOT NULL,
  applied_at TEXT NOT NULL
);

-- Initialisation of the metadata table
INSERT INTO _electric_meta (key, value) VALUES ('compensations', 0), ('lastAckdRowId','0'), ('lastSentRowId', '0'), ('lsn', 'MA=='), ('clientId', '');
<% end %>

-- These are toggles for turning the triggers on and off
DROP TABLE IF EXISTS _electric_trigger_settings;
CREATE TABLE _electric_trigger_settings(tablename STRING PRIMARY KEY, flag INTEGER);
<%= for {table_full_name, _table} <- tables do %>INSERT INTO _electric_trigger_settings(tablename,flag) VALUES ('<%= table_full_name %>', 1);
<% end %>
<%= for {table_full_name, table} <- tables do %>
/* Triggers for table <%= table.table_name %> */

-- Ensures primary key is immutable
DROP TRIGGER IF EXISTS update_ensure_<%= table.namespace %>_<%= table.table_name %>_primarykey;
CREATE TRIGGER update_ensure_<%= table.namespace %>_<%= table.table_name %>_primarykey
   BEFORE UPDATE ON <%= table_full_name %>
BEGIN
  SELECT
    CASE<%= for col <- table.primary do %>
      WHEN old.<%= col %> != new.<%= col %> THEN
        RAISE (ABORT,'cannot change the value of column <%= col %> as it belongs to the primary key')<% end %>
    END;
END;

-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table

DROP TRIGGER IF EXISTS insert_<%= table.namespace %>_<%= table.table_name %>_into_oplog;
CREATE TRIGGER insert_<%= table.namespace %>_<%= table.table_name %>_into_oplog
   AFTER INSERT ON <%= table_full_name %>
   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == '<%= table_full_name %>')
BEGIN
  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)
  VALUES ('<%= table.namespace %>', '<%= table.table_name %>', 'INSERT', json_object(<%= Enum.join(for col <- table.primary do "'#{col}', new.#{col}" end, ", ") %>), json_object(<%= Enum.join(for col <- table[:columns] do "'#{col}', new.#{col}" end, ", ") %>), NULL, NULL);
END;

DROP TRIGGER IF EXISTS update_<%= table.namespace %>_<%= table.table_name %>_into_oplog;
CREATE TRIGGER update_<%= table.namespace %>_<%= table.table_name %>_into_oplog
   AFTER UPDATE ON <%= table_full_name %>
   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == '<%= table_full_name %>')
BEGIN
  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)
  VALUES ('<%= table.namespace %>', '<%= table.table_name %>', 'UPDATE', json_object(<%= Enum.join(for col <- table.primary do "'#{col}', new.#{col}" end, ", ") %>), json_object(<%= Enum.join(for col <- table.columns do "'#{col}', new.#{col}" end, ", ") %>), json_object(<%= Enum.join(for col <- table.columns do "'#{col}', old.#{col}" end, ", ") %>), NULL);
END;

DROP TRIGGER IF EXISTS delete_<%= table.namespace %>_<%= table.table_name %>_into_oplog;
CREATE TRIGGER delete_<%= table.namespace %>_<%= table.table_name %>_into_oplog
   AFTER DELETE ON <%= table_full_name %>
   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == '<%= table_full_name %>')
BEGIN
  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)
  VALUES ('<%= table.namespace %>', '<%= table.table_name %>', 'DELETE', json_object(<%= Enum.join(for col <- table.primary do "'#{col}', old.#{col}" end, ", ") %>), NULL, json_object(<%= Enum.join(for col <- table.columns do "'#{col}', old.#{col}" end, ", ") %>), NULL);
END;

<%= if Enum.count(table.foreign_keys) > 0 do %>-- Triggers for foreign key compensations<% end %>
<%= for foreign_key <- table.foreign_keys do %>
DROP TRIGGER IF EXISTS compensation_insert_<%= table.namespace %>_<%= table.table_name %>_<%= foreign_key.child_key %>_into_oplog;
CREATE TRIGGER compensation_insert_<%= table.namespace %>_<%= table.table_name %>_<%= foreign_key.child_key %>_into_oplog
   AFTER INSERT ON <%= table_full_name %>
   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == '<%= tables[foreign_key.table].namespace %>.<%= tables[foreign_key.table].table_name %>') AND
        1 == (SELECT value from _electric_meta WHERE key == 'compensations')
BEGIN
  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)
  SELECT '<%= tables[foreign_key.table].namespace %>', '<%= tables[foreign_key.table].table_name %>', 'UPDATE', json_object(<%= Enum.join(for col <- tables[foreign_key.table].primary do "'#{col}', #{col}" end, ", ") %>), json_object(<%= Enum.join(for col <- tables[foreign_key.table].columns do "'#{col}', #{col}" end, ", ") %>), NULL, NULL
  FROM <%= tables[foreign_key.table].namespace %>.<%= tables[foreign_key.table].table_name %> WHERE <%= foreign_key.parent_key %> = new.<%= foreign_key.child_key %>;
END;

DROP TRIGGER IF EXISTS compensation_update_<%= table.namespace %>_<%= table.table_name %>_<%= foreign_key.child_key %>_into_oplog;
CREATE TRIGGER compensation_update_<%= table.namespace %>_<%= table.table_name %>_<%= foreign_key.child_key %>_into_oplog
   AFTER UPDATE ON <%= table.namespace %>.<%= table.table_name %>
   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == '<%= tables[foreign_key.table].namespace %>.<%= tables[foreign_key.table].table_name %>') AND
        1 == (SELECT value from _electric_meta WHERE key == 'compensations')
BEGIN
  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)
  SELECT '<%= tables[foreign_key.table].namespace %>', '<%= tables[foreign_key.table].table_name %>', 'UPDATE', json_object(<%= Enum.join(for col <- tables[foreign_key.table].primary do "'#{col}', #{col}" end, ", ") %>), json_object(<%= Enum.join(for col <- tables[foreign_key.table].columns do "'#{col}', #{col}" end, ", ") %>), NULL, NULL
  FROM <%= tables[foreign_key.table].namespace %>.<%= tables[foreign_key.table].table_name %> WHERE <%= foreign_key.parent_key %> = new.<%= foreign_key.child_key %>;
END;
<% end %>
<% end %>
